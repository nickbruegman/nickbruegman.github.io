[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "My name is Nick Bruegman. I am a senior, graduating in May of 2024, studying Sports Media and Communications, as well as Advertising and Public Relations. I love any and all sports from football to motorsports to MMA. This blog specifically will be centered around the UFC.The UFC is made up of different weight divisions. We are going to compare all of these divisions to find out who is truly the best of the best."
  },
  {
    "objectID": "posts/fantasy_wr/index.html",
    "href": "posts/fantasy_wr/index.html",
    "title": "Rookies Wideouts and Potential Fantasy Points",
    "section": "",
    "text": "Everybody is always curious if the next key player of a franchise will come from a draft pick, and of these rookies could make a difference on a fantasy team. With so much talent in the draft, the opportunity for a rookie to make an instant impact can turn a franchise around. Wide receivers coming into the league have historically been a key role to teams, if they aren’t a bust. So how does a team now if an athlete coming out of college is going to be a star at the next level? Well, using statistics of college wide receivers production and how good their new quarterback is, we can try and predict their production in the league. In turn we can figure out how many fantasy points these rookies will produce and if they are worth a higher pick or not. Obviously we can’t predict the future but looking at at these specific stats, we can try.\nA key stat I wanted to look at was the completion percentage of each NFL quarterback. The QBs ability to get the receivers the ball is a pretty big part. I also looked at each quarterbacks passing attempts. An offense that throws the ball more presents more opportunities for a wide receiver to score points. We also looked at the passing yards and touchdowns for the Quarterbacks. For the Wide Receivers, it’s difficult to compare what they did in college to the competition they will have in the NFL, but we did look at their receiving yards as well as their yards per reception. These stats are what all accounted for creating this list.\nSo who are the top 10?\nCode\nlibrary(tidyverse)\nlibrary(cfbfastR)\nlibrary(tidymodels)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(gt)\n\nset.seed(1234)\n\nwrpicks &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrpicks1423.csv\") |&gt; \n  mutate(college_year = year - 1)\n\nwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/receiving1323.csv\")\nwrusage &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/usage1323.csv\")\nwrfantasy &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/fantasystats1423.csv\") |&gt; \n  mutate(nfl_team = case_when(\n    tm == \"ARI\" ~ \"Arizona Cardinals\",\n    tm == \"ATL\" ~ \"Atlanta Falcons\",\n    tm == \"BAL\" ~ \"Baltimore Ravens\",\n    tm == \"BUF\" ~ \"Buffalo Bills\",\n    tm == \"CAR\" ~ \"Carolina Panthers\",\n    tm == \"CHI\" ~ \"Chicago Bears\",\n    tm == \"CIN\" ~ \"Cincinnati Bengals\",\n    tm == \"CLE\" ~ \"Cleveland Browns\",\n    tm == \"DAL\" ~ \"Dallas Cowboys\",\n    tm == \"DEN\" ~ \"Denver Broncos\",\n    tm == \"DET\" ~ \"Detroit Lions\",\n    tm == \"GNB\" ~ \"Green Bay Packers\",\n    tm == \"HOU\" ~ \"Houston Texans\",\n    tm == \"IND\" ~ \"Indianapolis Colts\",\n    tm == \"JAX\" ~ \"Jacksonville Jaguars\",\n    tm == \"KAN\" ~ \"Kansas City Chiefs\",\n    tm == \"LAC\" ~ \"Los Angeles Chargers\", \n    tm == \"LAR\" ~ \"Los Angeles Rams\", \n    tm == \"LVR\" ~ \"Las Vegas Raiders\",\n    tm == \"MIA\" ~ \"Miami Dolphins\",  \n    tm == \"MIN\" ~ \"Minnesota Vikings\",\n    tm == \"NOR\" ~ \"New Orleans Saints\",\n    tm == \"NWE\" ~ \"New England Patriots\",\n    tm == \"NYG\" ~ \"New York Giants\",\n    tm == \"NYJ\" ~ \"New York Jets\",\n    tm == \"OAK\" ~ \"Las Vegas Raiders\",\n    tm == \"PHI\" ~ \"Philadelphia Eagles\",\n    tm == \"PIT\" ~ \"Pittsburgh Steelers\",\n    tm == \"SDG\" ~ \"Los Angeles Chargers\",\n    tm == \"SEA\" ~ \"Seattle Seahawks\",\n    tm == \"SFO\" ~ \"San Francisco 49ers\",\n    tm == \"STL\" ~ \"Los Angeles Rams\",\n    tm == \"TAM\" ~ \"Tampa Bay Buccaneers\",\n    tm == \"TEN\" ~ \"Tennessee Titans\",\n    tm == \"WAS\" ~ \"Washington Commanders\",\n  ))\n\nnflstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/nfl_passing_offense0023.csv\") |&gt; filter(season &gt;= 2009) |&gt; \n  mutate(\n    nfl_team = case_when(\n      tm == \"Oakland Raiders\" ~ \"Las Vegas Raiders\",\n      tm == \"San Diego Chargers\" ~ \"Los Angeles Chargers\",\n      tm == \"St. Louis Rams\" ~ \"Los Angeles Rams\",\n      tm == \"Washington Football Team\" ~ \"Washington Commanders\",\n      tm == \"Washington Redskins\" ~ \"Washington Commanders\",\n      TRUE ~ tm\n      ))\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds\n  )\n\nwrfantasyselected &lt;- wrfantasy |&gt; \n  filter(fant_pos == \"WR\") |&gt; \n  select(\n    season,\n    player, \n    nfl_team,\n    fant_pos,\n    ppr\n  )\n\nnflpassingselected &lt;- nflstats |&gt; \n  mutate(\n    rolling_mean_passing_yards = rollmean(yds, k=5, align = \"right\", fill=NA),\n    rolling_mean_passing_tds = rollmean(td, k=5, align = \"right\", fill=NA),\n  ) |&gt; \n  filter(season &gt;= 2014) |&gt; \n  select(\n    season,\n    nfl_team,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    cmp_percent,\n    att\n    \n  )\n  \nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrpicksandfantasy &lt;- wrfantasyselected |&gt; \n  inner_join(wrpicksstats, by=c(\"player\" = \"name\", \"season\"=\"year\")) \n\nwrmodeling &lt;- wrpicksandfantasy |&gt;\n  left_join(nflpassingselected, by=c(\"season\"=\"season\", \"nfl_team.x\"=\"nfl_team\")) |&gt; \n  na.omit() |&gt; \n  select(-nfl_team.y)\n\nwrmodelingselected &lt;- wrmodeling |&gt; \n  select(\n    season,\n    player,\n    nfl_team.x,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    ppr\n  ) |&gt; \n  rename(\n    nfl_team = nfl_team.x\n  )\n\nplayer_split &lt;- initial_split(wrmodelingselected, prop = .8)\n\nplayer_train &lt;- training(player_split)\nplayer_test &lt;- testing(player_split)\n\nplayer_recipe &lt;- \n  recipe(ppr ~ ., data = player_train) |&gt; \n  update_role(player, season, nfl_team, new_role = \"ID\")\n\nlinear_mod &lt;- \n  linear_reg() |&gt; \n  set_engine(\"lm\") |&gt;\n  set_mode(\"regression\")\n\nlinear_workflow &lt;- \n  workflow() %&gt;% \n  add_model(linear_mod) %&gt;% \n  add_recipe(player_recipe)\n\nlinear_fit &lt;- \n  linear_workflow %&gt;% \n  fit(data = player_train)\n\n# Start the prediction for this season. The NFL team names are a mess because of choices made by the picks data provider. They just list them by city name, which creates problems in Los Angeles and New York. \n\nwrpicks &lt;- cfbd_draft_picks(year = 2024) |&gt; \n  filter(position == \"Wide Receiver\") |&gt; \n  mutate(college_year = year - 1) |&gt; \n  mutate(college_athlete_id = as.character(college_athlete_id)) |&gt; \n  mutate(nfl_team = case_when(\n    nfl_team == \"Arizona\" ~ \"Arizona Cardinals\",\n    nfl_team == \"Atlanta\" ~ \"Atlanta Falcons\",\n    nfl_team == \"Baltimore\" ~ \"Baltimore Ravens\",\n    nfl_team == \"Buffalo\" ~ \"Buffalo Bills\",\n    nfl_team == \"Carolina\" ~ \"Carolina Panthers\",\n    nfl_team == \"Chicago\" ~ \"Chicago Bears\",\n    nfl_team == \"Cincinnati\" ~ \"Cincinnati Bengals\",\n    nfl_team == \"Cleveland\" ~ \"Cleveland Browns\",\n    nfl_team == \"Dallas\" ~ \"Dallas Cowboys\",\n    nfl_team == \"Denver\" ~ \"Denver Broncos\",\n    nfl_team == \"Detroit\" ~ \"Detroit Lions\",\n    nfl_team == \"Green Bay\" ~ \"Green Bay Packers\",\n    nfl_team == \"Houston\" ~ \"Houston Texans\",\n    nfl_team == \"Indianapolis\" ~ \"Indianapolis Colts\",\n    nfl_team == \"Jacksonville\" ~ \"Jacksonville Jaguars\",\n    nfl_team == \"Kansas City\" ~ \"Kansas City Chiefs\",\n    name == \"Ladd McConkey\" ~ \"Los Angeles Chargers\", \n    name == \"Brenden Rice\" ~ \"Los Angeles Chargers\", \n    name == \"Cornelius Johnson\" ~ \"Los Angeles Chargers\",\n    name == \"Jordan Whittington\" ~ \"Los Angeles Rams\", \n    nfl_team == \"Las Vegas\" ~ \"Las Vegas Raiders\",\n    nfl_team == \"Miami\" ~ \"Miami Dolphins\",  \n    nfl_team == \"Minnesota\" ~ \"Minnesota Vikings\",\n    nfl_team == \"New Orleans\" ~ \"New Orleans Saints\",\n    nfl_team == \"New England\" ~ \"New England Patriots\",\n    name == \"Malik Nabers\" ~ \"New York Giants\",\n    nfl_team == \"New York\" ~ \"New York Jets\",\n    nfl_team == \"Philadelphia\" ~ \"Philadelphia Eagles\",\n    nfl_team == \"Pittsburgh\" ~ \"Pittsburgh Steelers\",\n    nfl_team == \"Seattle\" ~ \"Seattle Seahawks\",\n    nfl_team == \"San Francisco\" ~ \"San Francisco 49ers\",\n    nfl_team == \"St Louis\" ~ \"Los Angeles Rams\",\n    nfl_team == \"Tampa Bay\" ~ \"Tampa Bay Buccaneers\",\n    nfl_team == \"Tennessee\" ~ \"Tennessee Titans\",\n    nfl_team == \"Washington\" ~ \"Washington Commanders\",\n  ))\n\nwrstats &lt;- cfbd_stats_season_player(2023, category = \"receiving\") |&gt; \n  mutate(season = 2023)\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds,\n    receiving_ypr\n  )\n\nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrmodeling &lt;- wrpicksstats |&gt;\n  left_join(nflpassingselected, by=c(\"college_year\"=\"season\", \"nfl_team\"=\"nfl_team\")) |&gt;\n  select(\n    year,\n    name,\n    nfl_team,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    \n  ) |&gt; \n  rename(\n    player = name,\n    season = year\n  )\n\nlinearpredict &lt;- \n  linear_fit %&gt;% \n  predict(new_data = wrmodeling) %&gt;%\n  bind_cols(wrmodeling) \n\n# now that we have predictions, make the table\n\nlinearpredict |&gt; \n  select(player, nfl_team, overall, .pred) |&gt; \n  top_n(10, wt=.pred) |&gt; \n  arrange(desc(.pred)) |&gt; \n  gt() |&gt; \n  cols_label(\n    player = \"Player\",\n    nfl_team = \"Team\",\n    overall = \"Pick\",\n    .pred = \"Predicted fantasy points\"\n  )  |&gt;\n  tab_header(\n    title = \"Predicting the top fantasy rookie wide receivers\",\n    subtitle = \"Using draft grades, where they were drafted and who they were drafted by, these receivers could be the most valuable rookie wide receiver for your fantasy team this season. Call the predicted points a safe bet -- an average outcome -- not a ceiling.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Matt Waite  |  **Source:** CFDB, Pro-Football Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Predicting the top fantasy rookie wide receivers\n    \n    \n      Using draft grades, where they were drafted and who they were drafted by, these receivers could be the most valuable rookie wide receiver for your fantasy team this season. Call the predicted points a safe bet -- an average outcome -- not a ceiling.\n    \n    \n      Player\n      Team\n      Pick\n      Predicted fantasy points\n    \n  \n  \n    Brian Thomas Jr.\nJacksonville Jaguars\n23\n123.4264\n    Xavier Worthy\nKansas City Chiefs\n28\n122.5693\n    Marvin Harrison Jr.\nArizona Cardinals\n4\n120.9501\n    Keon Coleman\nBuffalo Bills\n33\n118.8789\n    Rome Odunze\nChicago Bears\n9\n117.1585\n    Malik Nabers\nNew York Giants\n6\n116.2447\n    Ricky Pearsall\nSan Francisco 49ers\n31\n116.0588\n    Ladd McConkey\nLos Angeles Chargers\n34\n115.3709\n    Adonai Mitchell\nIndianapolis Colts\n52\n102.5898\n    Xavier Legette\nCarolina Panthers\n32\n102.1499\n  \n  \n    \n      By: Matt Waite  |  Source: CFDB, Pro-Football Reference"
  },
  {
    "objectID": "posts/fantasy_wr/index.html#brian-thomas-jr.-jacksonville-drafted-23",
    "href": "posts/fantasy_wr/index.html#brian-thomas-jr.-jacksonville-drafted-23",
    "title": "Rookies Wideouts and Potential Fantasy Points",
    "section": "1. Brian Thomas Jr., Jacksonville, Drafted #23",
    "text": "1. Brian Thomas Jr., Jacksonville, Drafted #23\nThis could be surprising to some but Jacksonville throws the ball a lot and Brian Thomas Jr. will have plenty of chances for receptions. He was picked up after many other receivers but I do think he will make an impact for the Jags and could be a pretty good sleeper on a fantasy roster."
  },
  {
    "objectID": "posts/fantasy_wr/index.html#xavier-worthy-kansas-city-drafted-28",
    "href": "posts/fantasy_wr/index.html#xavier-worthy-kansas-city-drafted-28",
    "title": "Rookies Wideouts and Potential Fantasy Points",
    "section": "2. Xavier Worthy, Kansas City, Drafted #28",
    "text": "2. Xavier Worthy, Kansas City, Drafted #28\nBased of the stats, its no surprise that the Chiefs pick would be pretty high up on this list. Pat Mahomes can get this guy the ball and Worthy can get open for him with a lot of speed. I really hope he is a bust though because KC is insanely annoying and they need to be terrible again like their rich history shows."
  },
  {
    "objectID": "posts/fantasy_wr/index.html#marvin-harrison-jr.-arizona-drafted-4",
    "href": "posts/fantasy_wr/index.html#marvin-harrison-jr.-arizona-drafted-4",
    "title": "Rookies Wideouts and Potential Fantasy Points",
    "section": "3. Marvin Harrison Jr., Arizona, Drafted #4",
    "text": "3. Marvin Harrison Jr., Arizona, Drafted #4\nI was expecting this guy to be #1, he is insanely talented and has the potential to be one of the best the league has ever seen. With Murray in the backfield, Harrison Jr. will be getting a ton of looks and opportunities to make plays. He can be that guy for the Cardinalsand be a go-to playmaker."
  },
  {
    "objectID": "posts/russell-wilson/index.html",
    "href": "posts/russell-wilson/index.html",
    "title": "Should Broncos Fans Ride with DangeRuss?",
    "section": "",
    "text": "It’s no secret that the Denver Broncos have fallen from glory since their savior Peyton Manning left after the 2015-16 Super Bowl season. They struggled to fill this role with various other options but none have brought them very far. As a massive fan, it has been very difficult to watch. They’ve just been missing that elite threat in the backfield. However, they may have found a solution. Russell Wilson was an elite quaterback with the Seahawks, but does he still have that magic and did he bring it Denver? Is he worth everything we gave up to get him to here? While his first year was less than ideal. They only won 5 games in 2022 when lead by Russ. However there have been many new and exciting changes in Denver, including Wilsons performance. Even while being an older quarterback, he’s shown he has that spark.\n\n\nCode\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(dplyr)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(gt)\nlibrary(janitor)\nlibrary(ggrepel)\n\nnfl2023 &lt;- read_csv(\"nfl2023.csv\") |&gt; mutate(Season = 2023) |&gt; mutate(Player = gsub(\"*\", \"\", Player, fixed=TRUE), Player = gsub(\"+\", \"\", Player, fixed=TRUE)) |&gt; filter(Pos == \"QB\") |&gt; filter(Att &gt;= 100) |&gt; \n  mutate(PlayerSeason = paste(Player, Season))\n\nnfl2022 &lt;- read_csv(\"nfl2022.csv\") |&gt; mutate(Season = 2022) |&gt; mutate(Player = gsub(\"*\", \"\", Player, fixed=TRUE), Player = gsub(\"+\", \"\", Player, fixed=TRUE)) |&gt; filter(Pos == \"QB\") |&gt; filter(Att &gt;= 100) |&gt; \n  mutate(PlayerSeason = paste(Player, Season))\n\nruss22 &lt;- nfl2022 |&gt;\n  filter(Player == \"Russell Wilson\") \n\nruss23 &lt;- nfl2023 |&gt;\n  filter(Player == \"Russell Wilson\") \n\nt23 &lt;- nfl2023 |&gt;\n  top_n(5, wt=Yds...12)\n\nt22 &lt;- nfl2022 |&gt;\n  top_n(5, wt=Yds...12)\n\nc1a &lt;- nfl2022 |&gt;\n  filter(Age &gt;= 30)\n\nc1b &lt;- nfl2023 |&gt;\n  filter(Age &gt;= 30)\n\nggplot() +\n  geom_point(data=c1a, aes(x=Age, y=`Cmp%`),\n             size = 2,\n             colour = \"darkgray\") +\n  geom_point(data=c1b, aes(Age, y=`Cmp%`),\n             size = 2,\n             colour = \"lightblue\") +\n  geom_point(data=russ22, aes(Age, y=`Cmp%`),\n             size = 4,\n             colour = \"navy\") +\n  geom_point(data=russ23, aes(Age, y=`Cmp%`),\n             size = 4,\n             colour = \"orange\") + \n    labs(\n    x = \"Age\",\n    y = \"Completion %\",\n    title = \"Old Dogs Slinging the Rock\",\n    subtitle = \"QBs over the age of 30 from 2022 and 2023\",\n    caption = \"Source: Pro Football Reference | Graphic by Nick Bruegman\") + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 15, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    plot.title.position = \"plot\")\n\n\n\n\n\n“But what about the rest of the league?” Yea I get it the league has a lot of young guys, I’m just saying he’s playing real well for is age group. Along with a new coach and staff, Russell has dramatically improved when he’s dropping back from his first season with the Broncos.\n\n\nCode\nggplot() + \n  geom_point(\n    data=nfl2022,\n    aes(x=QBR, y=`Succ%`, size=TD),\n    color=\"lightgrey\") +\n  geom_point(\n    data=nfl2023,\n    aes(x=QBR, y=`Succ%`, size=TD),\n    color=\"lightblue\") +\n  geom_point(\n    data=russ22,\n    aes(x=QBR,y=`Succ%`,size=TD),\n    color=\"orange\") +\n  geom_point(\n    data=russ23,\n    aes(x=QBR, y=`Succ%`, size=TD),\n    color=\"navy\") + \n  geom_vline(xintercept = 40) +\n  geom_hline(yintercept = 40) +\n  geom_text_repel(\n    data = russ22,\n    aes(x=QBR, y=`Succ%`, label= PlayerSeason)) +\n  geom_text_repel(\n    data = russ23,\n    aes(x=QBR, y=`Succ%`, label= PlayerSeason)) + \n  labs(\n    x = \"ESPN QB Rating\",\n    y = \"1st Down Successs PCT\",\n    title = \"DangeRuss in 2022 and 2023\",\n    subtitle = \"This is data from every QB in 2022 and 2023 highlighting each of Russell Wilsons seasons.\",\n    caption = \"Source: Pro Football Reference | Graphic by Nick Bruegman\") + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 15, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    plot.title.position = \"plot\")\n\n\n\n\n\nRuss is doing well! The seasons not over but he looks a lot better than last year! “But there’s so many other QBs that are better!” Guess what? I don’t care. We are on a personal journey of improvement with Russell because he is our quarterback and we love him! (Its definitely not because we gave away every decent draft pick we had for the next two years so we have no shot at getting another guy.) We are kind of stuck with him but as of late this is not bad thing. The Broncos started at 1-5 but have improved to 6-6 int their last 6 games. This charge led by none other than DangeRuss… (and the defense)\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=russ22, \n    aes(y=PlayerSeason, x=`TD%`, xend=`Int%`),\n    size = 2,\n    colour = \"orange\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n  geom_dumbbell(\n    data=russ23, \n    aes(y=PlayerSeason, x=`TD%`, xend=`Int%`),\n    size = 2,\n    colour = \"navy\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n  geom_dumbbell(\n    data=t22, \n    aes(y=PlayerSeason, x=`TD%`, xend=`Int%`),\n    size = 2,\n    colour = \"lightgray\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n  geom_dumbbell(\n    data=t23, \n    aes(y=PlayerSeason, x=`TD%`, xend=`Int%`),\n    size = 2,\n    colour = \"lightblue\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n    labs(\n    x = \"Interception % / Touchdown %\",\n    y = \"Player & Season\",\n    title = \"It's a Pick or It's Six\",\n    subtitle = \"This shows the top 5 QBs from the 23 and 22 seaosn with Russell Wilson.\",\n    caption = \"Source: Pro Football Reference | Graphic by Nick Bruegman\") + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 15, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    plot.title.position = \"plot\")\n\n\n\n\n\nI mean it speaks for itself. Russell has done some hard work in the off-season. He might still throw some interceptions here and there but the guys productivity has boomed! He has made massive improvements and if he can keep getting better, it will have been worth the trade.\nPut very simply, Broncos Country, Let’s Ride with DangeRuss to the Super Bowl."
  },
  {
    "objectID": "posts/machine-learning-march-madness-bracket/index.html",
    "href": "posts/machine-learning-march-madness-bracket/index.html",
    "title": "March Madness Machine Learning does not work",
    "section": "",
    "text": "March Madness is brings the highest of highs, and the lowest of lows for the avid college basketball fan. It’s one of my favortie times of the year. I love the bulding a braket just to watch it all fall apart. This year I was excited to build one in this class but man was I so wrong about having high expectations. I thought building this model to predict games was going to be the answer. It was not.\nWhen building my model, I tried to watch games and see what the biggest factors were for winning. I complied a lot of stats and found some that really helped the model like rebounding and what percentage of points were coming from threes. Once the madness began, I quickly realized I made a model that was pretty much the AP poll with a few outliers from lower conferences. The strength of schedule wasn’t accounted for and it showed in a few games like why I had Charleston beating Alabama or McNeese over Gonzaga. (McNeese in my Elite Eight and was convinces they were a powerhouse…) There are many other games like this that really ruined my bracket. My girlfriend had a better bracket than me and she solely picked of the mascots she liked, so theres that too.\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'tidyr' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(tidymodels)\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n✔ broom        1.0.5      ✔ rsample      1.2.0 \n✔ dials        1.2.1      ✔ tune         1.1.2 \n✔ infer        1.0.6      ✔ workflows    1.1.4 \n✔ modeldata    1.3.0      ✔ workflowsets 1.0.1 \n✔ parsnip      1.2.0      ✔ yardstick    1.3.0 \n✔ recipes      1.0.10     \n\n\nWarning: package 'dials' was built under R version 4.3.2\n\n\nWarning: package 'infer' was built under R version 4.3.2\n\n\nWarning: package 'parsnip' was built under R version 4.3.2\n\n\nWarning: package 'recipes' was built under R version 4.3.2\n\n\nWarning: package 'workflows' was built under R version 4.3.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n\n\nCode\nlibrary(hoopR)\nlibrary(zoo)\n\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nCode\nlibrary(bonsai)\n\nset.seed(1234)\n\ngames &lt;- load_mbb_team_box(seasons = 2015:2024)\n\nnond1 &lt;- games |&gt; group_by(team_id, season) |&gt; tally() |&gt; filter(n &lt; 10) |&gt; select(team_id)\nnond1 &lt;- pull(nond1)\n\ndf &lt;- games |&gt; filter(!team_id %in% nond1 & !opponent_team_id %in% nond1)\n\nteamside &lt;- df |&gt; \n  group_by(team_short_display_name, season) |&gt; \n  arrange(game_date) |&gt; \n  rename(\n    team_defensive_rebounds = defensive_rebounds,\n    team_offensive_rebounds = offensive_rebounds,\n    team_tot_turnovers = total_turnovers,\n    team_fouls = fouls,\n    team_free_throws_made = free_throws_made\n  ) |&gt;\n  mutate(\n    team_possessions = field_goals_attempted - team_offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_season_possessions = lag(cummean(team_possessions), n=1),\n    \n    team_points_per_possession = team_score/team_possessions,\n    team_season_points_per_possession = lag(cummean(team_points_per_possession), n=1),\n    \n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_season_offensive_efficiency = lag(cummean(team_offensive_efficiency), n=1),\n    \n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_season_defensive_points_per_possession = lag(cummean(team_defensive_points_per_possession), n=1),\n    \n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_defensive_efficiency = lag(cummean(team_defensive_efficiency), n=1),  \n    \n    team_effective_field_goal_pct = (field_goals_made + (0.5 * three_point_field_goals_made))/field_goals_attempted,\n    team_season_effective_field_goal_pct = lag(cummean(team_effective_field_goal_pct), n=1),\n    \n    team_shots_attempted = field_goals_attempted + (.475 * free_throws_attempted),\n    team_season_shots_attempted = lag(cummean(team_shots_attempted), n=1),\n    \n    team_offensive_rebound_pct = (team_offensive_rebounds/team_shots_attempted) * 100,\n    team_season_offensive_rebound_pct = lag(cummean(team_offensive_rebound_pct), n=1),\n    \n    team_assisted_field_goal_pct = (assists/field_goals_made) * 100,\n    team_season_assisted_field_goal_pct = lag(cummean(team_assisted_field_goal_pct), n=1),\n    \n    team_season_three_point_pct = lag(cummean(three_point_field_goal_pct), n=1),\n    \n    team_season_free_throw_pct = lag(cummean(free_throw_pct), n=1),\n    \n    team_season_defensive_rebounds = lag(cummean(team_defensive_rebounds), n=1),\n    \n    team_season_offensive_rebounds = lag(cummean(team_offensive_rebounds), n=1),\n    \n    team_season_tot_turnovers = lag(cummean(team_tot_turnovers), n=1),\n    \n    team_pct_points_from_threes = (three_point_field_goals_made * 3)/team_score,\n    team_season_pct_points_from_threes = lag(cummean(team_pct_points_from_threes), n=1),\n    \n    team_season_blocks_per_game = lag(cummean(blocks), n=1),\n    \n    team_season_steals_per_game = lag(cummean(steals), n=1),\n    \n    team_season_stops_per_game = team_season_blocks_per_game + team_season_steals_per_game,\n    \n    team_season_points_per_game = lag(cummean(team_score), n=1),\n    \n    team_season_points_allowed_per_game = lag(cummean(opponent_team_score), n=1),\n    \n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_defensive_points_per_possession = team_season_defensive_points_per_possession,\n    opponent_season_points_per_possession = team_season_points_per_possession,\n    opponent_season_effective_field_goal_pct = team_season_effective_field_goal_pct,\n    opponent_season_offensive_rebound_pct = team_season_offensive_rebound_pct,\n    opponent_season_assisted_field_goal_pct = team_season_assisted_field_goal_pct,\n    opponent_season_three_point_pct = team_season_three_point_pct,\n    opponent_season_free_throw_pct = team_season_free_throw_pct,\n    opponent_season_shots_attempted = team_season_shots_attempted,\n    opponent_season_defensive_rebounds = team_season_defensive_rebounds,\n    opponent_season_offensive_rebounds = team_season_offensive_rebounds,\n    opponent_season_pct_points_from_threes = team_season_pct_points_from_threes,\n    opponent_season_tot_turnovers = team_season_tot_turnovers,\n    opponent_season_stops_per_game = team_season_stops_per_game,\n    opponent_season_points_per_game = team_season_points_per_game,\n    opponent_season_points_allowed_per_game = team_season_points_allowed_per_game,\n    opponent_fouls = team_fouls,\n    opponent_free_throws_made = team_free_throws_made,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_points_per_possession,\n    opponent_season_defensive_points_per_possession,\n    opponent_season_effective_field_goal_pct,\n    opponent_season_offensive_rebound_pct,\n    opponent_season_assisted_field_goal_pct,\n    opponent_season_free_throw_pct,\n    opponent_season_three_point_pct,\n    opponent_season_shots_attempted,\n    opponent_season_shots_attempted,\n    opponent_season_defensive_rebounds,\n    opponent_season_offensive_rebounds,\n    opponent_season_pct_points_from_threes,\n    opponent_season_tot_turnovers,\n    opponent_season_stops_per_game,\n    opponent_season_points_per_game,\n    opponent_season_points_allowed_per_game,\n    opponent_fouls,\n    opponent_free_throws_made,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\n\nJoining with `by = join_by(game_id, opponent_team_id)`\n\n\nCode\nbothsides &lt;- bothsides |&gt; \n  mutate(\n    team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\")),\n    team_season_defensive_rebound_pct = (team_season_defensive_rebounds/opponent_season_shots_attempted) * 100,\n    opponent_season_defensive_rebound_pct = (opponent_season_defensive_rebounds/team_season_shots_attempted) * 100,\n    team_season_turnover_margin = team_season_tot_turnovers/opponent_season_tot_turnovers,\n    opponent_season_turnover_margin = opponent_season_tot_turnovers/team_season_tot_turnovers,\n    team_points_per_foul = team_free_throws_made / opponent_fouls,\n    team_season_points_per_foul = lag(cummean(team_points_per_foul), n=1),\n    opponent_points_per_foul = opponent_free_throws_made / team_fouls,\n    opponent_season_points_per_foul = lag(cummean(opponent_points_per_foul), n=1)\n)\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season,\n    team_season_points_per_possession,\n    team_season_defensive_points_per_possession,\n    team_season_effective_field_goal_pct,\n    team_season_offensive_rebound_pct,\n    team_season_assisted_field_goal_pct,\n    team_season_free_throw_pct,\n    team_season_three_point_pct,\n    team_season_shots_attempted,\n    team_season_shots_attempted,\n    team_season_defensive_rebounds,\n    team_season_offensive_rebounds,\n    team_season_pct_points_from_threes,\n    team_season_tot_turnovers,\n    team_season_stops_per_game,\n    team_season_points_per_game,\n    team_season_points_allowed_per_game,\n    team_season_points_per_foul,\n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_points_per_possession,\n    opponent_season_defensive_points_per_possession,\n    opponent_season_effective_field_goal_pct,\n    opponent_season_offensive_rebound_pct,\n    opponent_season_assisted_field_goal_pct,\n    opponent_season_free_throw_pct,\n    opponent_season_three_point_pct,\n    opponent_season_shots_attempted,\n    opponent_season_shots_attempted,\n    opponent_season_defensive_rebounds,\n    opponent_season_offensive_rebounds,\n    opponent_season_pct_points_from_threes,\n    opponent_season_tot_turnovers,\n    opponent_season_stops_per_game,\n    opponent_season_points_per_game,\n    opponent_season_points_allowed_per_game,\n    opponent_season_points_per_foul,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_result\n    ) |&gt; \n  na.omit()\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_train) |&gt; \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |&gt;\n  step_normalize(all_predictors())\n\nsummary(game_recipe)\n\n\n# A tibble: 42 × 4\n   variable                                    type      role      source  \n   &lt;chr&gt;                                       &lt;list&gt;    &lt;chr&gt;     &lt;chr&gt;   \n 1 game_id                                     &lt;chr [2]&gt; ID        original\n 2 game_date                                   &lt;chr [1]&gt; ID        original\n 3 team_short_display_name                     &lt;chr [3]&gt; ID        original\n 4 opponent_team_short_display_name            &lt;chr [3]&gt; ID        original\n 5 season                                      &lt;chr [2]&gt; ID        original\n 6 team_season_points_per_possession           &lt;chr [2]&gt; predictor original\n 7 team_season_defensive_points_per_possession &lt;chr [2]&gt; predictor original\n 8 team_season_effective_field_goal_pct        &lt;chr [2]&gt; predictor original\n 9 team_season_offensive_rebound_pct           &lt;chr [2]&gt; predictor original\n10 team_season_assisted_field_goal_pct         &lt;chr [2]&gt; predictor original\n# ℹ 32 more rows\n\n\nCode\nlightgbm_mod &lt;- \n  boost_tree() |&gt;\n  set_engine(\"lightgbm\") |&gt;\n  set_mode(mode = \"classification\")\n\nlightgbm_workflow &lt;- \n  workflow() |&gt; \n  add_model(lightgbm_mod) |&gt; \n  add_recipe(game_recipe)\n\nlightgbm_fit &lt;- \n  lightgbm_workflow |&gt; \n  fit(data = game_train)\n\nlightgbmpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_train) |&gt;\n  bind_cols(game_train) \n\nlightgbmpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt;\n  bind_cols(lightgbmpredict)\n\nmetrics(lightgbmpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.706\n2 kap      binary         0.411\n\n\nCode\nlightgbmtestpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_test) |&gt;\n  bind_cols(game_test)\n\nlightgbmtestpredict &lt;- lightgbm_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt;\n  bind_cols(lightgbmtestpredict)\n\nmetrics(lightgbmtestpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.684\n2 kap      binary         0.369\n\n\nCode\ngames &lt;- load_mbb_team_box(seasons = 2015:2024)\n\nnond1 &lt;- games |&gt; group_by(team_id, season) |&gt; tally() |&gt; filter(n &lt; 10) |&gt; select(team_id)\nnond1 &lt;- pull(nond1)\n\ndf &lt;- games |&gt; filter(!team_id %in% nond1 & !opponent_team_id %in% nond1)\n\nteamside &lt;- df |&gt; \n  group_by(team_short_display_name, season) |&gt; \n  arrange(game_date) |&gt; \n  rename(\n    team_defensive_rebounds = defensive_rebounds,\n    team_offensive_rebounds = offensive_rebounds,\n    team_tot_turnovers = total_turnovers,\n    team_fouls = fouls,\n    team_free_throws_made = free_throws_made\n  ) |&gt;\n  mutate(\n    team_possessions = field_goals_attempted - team_offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_season_possessions = cummean(team_possessions),\n    \n    team_points_per_possession = team_score/team_possessions,\n    team_season_points_per_possession = cummean(team_points_per_possession),\n    \n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_season_offensive_efficiency = cummean(team_offensive_efficiency),\n    \n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_season_defensive_points_per_possession = cummean(team_defensive_points_per_possession),\n    \n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_defensive_efficiency = cummean(team_defensive_efficiency),  \n    \n    team_effective_field_goal_pct = (field_goals_made + (0.5 * three_point_field_goals_made))/field_goals_attempted,\n    team_season_effective_field_goal_pct = cummean(team_effective_field_goal_pct),\n    \n    team_shots_attempted = field_goals_attempted + (.475 * free_throws_attempted),\n    team_season_shots_attempted = cummean(team_shots_attempted),\n    \n    team_offensive_rebound_pct = (team_offensive_rebounds/team_shots_attempted) * 100,\n    team_season_offensive_rebound_pct = cummean(team_offensive_rebound_pct),\n    \n    team_assisted_field_goal_pct = (assists/field_goals_made) * 100,\n    team_season_assisted_field_goal_pct = cummean(team_assisted_field_goal_pct),\n    \n    team_season_three_point_pct = cummean(three_point_field_goal_pct),\n    \n    team_season_free_throw_pct = cummean(free_throw_pct),\n    \n    team_season_defensive_rebounds = cummean(team_defensive_rebounds),\n    \n    team_season_offensive_rebounds = cummean(team_offensive_rebounds),\n    \n    team_season_tot_turnovers = cummean(team_tot_turnovers),\n    \n    team_pct_points_from_threes = (three_point_field_goals_made * 3)/team_score,\n    team_season_pct_points_from_threes = cummean(team_pct_points_from_threes),\n    \n    team_season_blocks_per_game = cummean(blocks),\n    \n    team_season_steals_per_game = cummean(steals),\n    \n    team_season_stops_per_game = team_season_blocks_per_game + team_season_steals_per_game,\n    \n    team_season_points_per_game = cummean(team_score),\n    \n    team_season_points_allowed_per_game = cummean(opponent_team_score),\n    \n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_defensive_points_per_possession = team_season_defensive_points_per_possession,\n    opponent_season_points_per_possession = team_season_points_per_possession,\n    opponent_season_effective_field_goal_pct = team_season_effective_field_goal_pct,\n    opponent_season_offensive_rebound_pct = team_season_offensive_rebound_pct,\n    opponent_season_assisted_field_goal_pct = team_season_assisted_field_goal_pct,\n    opponent_season_three_point_pct = team_season_three_point_pct,\n    opponent_season_free_throw_pct = team_season_free_throw_pct,\n    opponent_season_shots_attempted = team_season_shots_attempted,\n    opponent_season_defensive_rebounds = team_season_defensive_rebounds,\n    opponent_season_offensive_rebounds = team_season_offensive_rebounds,\n    opponent_season_pct_points_from_threes = team_season_pct_points_from_threes,\n    opponent_season_tot_turnovers = team_season_tot_turnovers,\n    opponent_season_stops_per_game = team_season_stops_per_game,\n    opponent_season_points_per_game = team_season_points_per_game,\n    opponent_season_points_allowed_per_game = team_season_points_allowed_per_game,\n    opponent_fouls = team_fouls,\n    opponent_free_throws_made = team_free_throws_made,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_points_per_possession,\n    opponent_season_defensive_points_per_possession,\n    opponent_season_effective_field_goal_pct,\n    opponent_season_offensive_rebound_pct,\n    opponent_season_assisted_field_goal_pct,\n    opponent_season_free_throw_pct,\n    opponent_season_three_point_pct,\n    opponent_season_shots_attempted,\n    opponent_season_shots_attempted,\n    opponent_season_defensive_rebounds,\n    opponent_season_offensive_rebounds,\n    opponent_season_pct_points_from_threes,\n    opponent_season_tot_turnovers,\n    opponent_season_stops_per_game,\n    opponent_season_points_per_game,\n    opponent_season_points_allowed_per_game,\n    opponent_fouls,\n    opponent_free_throws_made,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\n\nJoining with `by = join_by(game_id, opponent_team_id)`\n\n\nCode\nbothsides &lt;- bothsides |&gt; \n  mutate(\n    team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\")),\n    team_season_defensive_rebound_pct = (team_season_defensive_rebounds/opponent_season_shots_attempted) * 100,\n    opponent_season_defensive_rebound_pct = (opponent_season_defensive_rebounds/team_season_shots_attempted) * 100,\n    team_season_turnover_margin = team_season_tot_turnovers/opponent_season_tot_turnovers,\n    opponent_season_turnover_margin = opponent_season_tot_turnovers/team_season_tot_turnovers,\n    team_points_per_foul = team_free_throws_made / opponent_fouls,\n    team_season_points_per_foul = cummean(team_points_per_foul),\n    opponent_points_per_foul = opponent_free_throws_made / team_fouls,\n    opponent_season_points_per_foul = cummean(opponent_points_per_foul),\n)\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season,\n    team_season_points_per_possession,\n    team_season_defensive_points_per_possession,\n    team_season_effective_field_goal_pct,\n    team_season_offensive_rebound_pct,\n    team_season_assisted_field_goal_pct,\n    team_season_free_throw_pct,\n    team_season_three_point_pct,\n    team_season_shots_attempted,\n    team_season_shots_attempted,\n    team_season_defensive_rebounds,\n    team_season_offensive_rebounds,\n    team_season_pct_points_from_threes,\n    team_season_tot_turnovers,\n    team_season_stops_per_game,\n    team_season_points_per_game,\n    team_season_points_allowed_per_game,\n    team_season_points_per_foul,\n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_points_per_possession,\n    opponent_season_defensive_points_per_possession,\n    opponent_season_effective_field_goal_pct,\n    opponent_season_offensive_rebound_pct,\n    opponent_season_assisted_field_goal_pct,\n    opponent_season_free_throw_pct,\n    opponent_season_three_point_pct,\n    opponent_season_shots_attempted,\n    opponent_season_shots_attempted,\n    opponent_season_defensive_rebounds,\n    opponent_season_offensive_rebounds,\n    opponent_season_pct_points_from_threes,\n    opponent_season_tot_turnovers,\n    opponent_season_stops_per_game,\n    opponent_season_points_per_game,\n    opponent_season_points_allowed_per_game,\n    opponent_season_points_per_foul,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_result\n    ) |&gt; \n  na.omit()\n\n\nI was proud that my model picked JMU over the oversized groundhogs from Wisconsin. I would honestly say that was maybe my only good win in the bracket besides having UConn winning the whole thing but so did everyone and their mom. Other notable wins that my model had selected correct was the first round Colorado over Florida. The model had some other upsets that did not happen and missed pretty much every other upset. However my bracket was in the 76.1% and scored 1010 pts. So I guess going off of an AP Poll or KenPom ranking system can be pretty accurate, although this years tourney was sort of tame in comparison to past years.\nOverall, the machine learning can help make you pick teams for your bracket, but in the end your brackets gonna get busted just like they all do."
  },
  {
    "objectID": "posts/statistical-p4p-fighters/index.html",
    "href": "posts/statistical-p4p-fighters/index.html",
    "title": "The All-Time, Pound-4-Pound, Statistical Goat of the UFC",
    "section": "",
    "text": "There is an age old argument in the world of UFC. Who truly is the best of the best? Many talk about the title defenses of champions, the knockout power of strikers, or the dominance of elite grapplers to debate the Greatest of All-Time. With the multiple divisions and various skill sets the sport displays, its difficult to truly compare fighters amoung weightclasses. However, I think it can be simplified. Just look at the stats.\nWhen looking at http://ufcstats.com we can breakdown each fighters career and what they have accomplished. I think we can all agree, to be considered the GOAT of a sport, you have to have a championship under your belt. So let’s look at all the present UFC champions as well as the past champions. (The past champions in this dataset all have atleast 1 title defense, current champions may not have a defense but that could be coming in their next fight)\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(ggplot2)\nlibrary(ggbeeswarm)\n\nstats &lt;- ufc.stats::ufc_stats\n\ntrial &lt;- stats |&gt; \n  separate(\n    time, into=c(\"Minutes\", \"Seconds\"), sep=\":\") |&gt; \n  mutate(\n    Last_Round_Time = (as.numeric(Minutes)*60) + as.numeric(Seconds))\n\nclean1 &lt;- trial |&gt;\n  group_by(fighter) |&gt;\n  summarize(\n    Total_Fights = n_distinct(id),\n    Rounds_Fought = n(),\n    Sig_Strikes_Landed = sum(significant_strikes_landed),\n    Sig_Strikes_Att = sum(significant_strikes_attempted),\n    Tot_Strikes_Landed = sum(total_strikes_landed),\n    Tot_Strikes_Att = sum(total_strikes_attempted),\n    Takedowns = sum(takedown_successful),\n    Takedown_Att = sum(takedown_attempted),\n    Knockdowns = sum(knockdowns),\n    Submission_Att = sum(submission_attempt),\n    Reversals = sum(reversals),\n    Head_Strikes = sum(head_landed),\n    Head_Att = sum(head_attempted),\n    Body_Strikes = sum(body_landed),\n    Body_Att = sum(body_attempted),\n    Leg_Strikes = sum(leg_landed),\n    Leg_Att = sum(leg_attempted),\n    Distance_Strikes = sum(distance_landed),\n    Distance_Att = sum(distance_attempted),\n    Clinch_Strikes = sum(clinch_landed),\n    Clinch_Att = sum(clinch_attempted),\n    Ground_Strikes = sum(ground_landed),\n    Ground_Att = sum(ground_attempted),\n    Time_Finished = sum(Last_Round_Time)\n    ) |&gt;\n  mutate(\n    Sig_Strike_PCT = (Sig_Strikes_Landed/Sig_Strikes_Att)*100,\n    TOT_Strike_PCT = (Tot_Strikes_Landed/Tot_Strikes_Att)*100,\n    Takedown_PCT = (Takedowns/Takedown_Att)*100,\n    Head_Strikes_PCT = (Head_Strikes/Head_Att)*100,\n    Body_Strikes_PCT = (Body_Strikes/Body_Att)*100,\n    Leg_Strikes_PCT = (Leg_Strikes/Leg_Att)*100,\n    AVG_Round_Ended = Rounds_Fought/Total_Fights,\n    AVG_Sec_Finished = Time_Finished/Rounds_Fought)\n\nclean2 &lt;- trial |&gt;\n  filter(round == \"round 1\") |&gt; \n  group_by(fighter) |&gt; \n  summarize(\n    Total_Fights = n_distinct(id),\n    Wins = sum(winner == \"W\"),\n    Losses = sum(winner == \"L\"),\n    Draws = sum(winner == \"D\"),\n    No_Contest = sum(winner == \"NC\"),\n    CNC = sum(result == \"Could Not Continue\"),\n    KO_TKO_W = sum(result == \"KO/TKO\" & winner == \"W\"),\n    KO_TKO_L = sum(result == \"KO/TKO\" & winner == \"L\"),\n    Submissions_W = sum(result == \"Submission\" & winner == \"W\"),\n    Submissions_L = sum(result == \"Submission\" & winner == \"L\"),\n    Unanimous_W = sum(result == \"Decision - Unanimous\" & winner == \"W\"),\n    Unanimous_L = sum(result == \"Decision - Unanimous\" & winner == \"L\"),\n    Split_W = sum(result == \"Decision - Split\" & winner == \"W\"),\n    Split_L = sum(result == \"Decision - Split\" & winner == \"L\"),\n    Majority_W = sum(result == \"Decision - Majority\"& winner == \"W\"),\n    Majority_L = sum(result == \"Decision - Majority\"& winner == \"L\")\n    ) |&gt;\n  mutate(\n    Finishes = Submissions_W + KO_TKO_W,\n    Finished = Submissions_L + KO_TKO_L,\n    Win_PCT = (Wins / Total_Fights)*100,\n    Finish_PCT = (Finishes / Wins)*100,\n    Decision_W = Unanimous_W + Split_W + Majority_W\n    )\n\nufc_careers &lt;- merge(clean1, clean2, by = \"fighter\", all = TRUE)\n\nchamps &lt;- c(\"Jon Jones\", \"Francis Ngannou\", \"Stipe Miocic\", \"Daniel Cormier\", \"Cain Velasquez\", \"Junior dos Santos\", \"Brock Lesnar\", \"Randy Couture\", \"Tim Sylvia\", \"Kevin Randleman\", \"Maurice Smith\", \"Alex Pereira\", \"Jan Blachowicz\", \"Lyoto Machida\", \"Quinton Jackson\", \"Chuck Liddell\", \"Tito Ortiz\", \"Israel Adesanya\", \"Anderson Silva\", \"Rich Franklin\", \"Chris Weidman\", \"Luke Rockhold\", \"Leon Edwards\", \"Kamaru Usman\", \"Tyron Woodley\", \"Robbie Lawler\", \"Georges St-Pierre\", \"Matt Hughes\", \"Pat Miletich\", \"Islam Makhachev\", \"Charles Oliveira\", \"Khabib Nurmagomedov\", \"Rafel Dos Anjos\", \"Anthony Pettis\", \"Benson Henderson\", \"Frankie Edgar\", \"BJ Penn\", \"Sean Sherk\", \"Jens Pulver\", \"Alexander Volkanovski\", \"Max Holloway\", \"Connor McGregor\", \"Jose Aldo\", \"Sean O'Malley\", \"Sean Strickland\", \"Aljamain Sterling\", \"Henry Cejudo\", \"TJ Dillashaw\", \"Dominick Cruz\", \"Renan Barao\", \"Brandon Moreno\", \"Deiveson Figueiredo\", \"Demetrious Johnson\", \"Alex Pereira\", \"Alexandre Pantoja\", \"Tom Aspinall\")\n\nchart_0 &lt;- ufc_careers |&gt;\n  group_by(fighter) |&gt;\n  filter(fighter %in% champs) |&gt;\n  filter(Wins &gt; 12) |&gt;\n  summarise(\n    KO_TKO_W,\n    Submissions_W,\n    Decision_W\n  )\n\nchart_0w &lt;- chart_0 |&gt;\n  pivot_longer(\n    cols = ends_with(\"W\"),\n    names_to = \"Type\",\n    values_to = \"Wins\")\n\nggplot() + \n  geom_bar(data = chart_0w, aes(x=reorder(fighter, Wins), weight= Wins, fill=Type)) + \n  coord_flip() +\n  labs(\n    x = \"Fighter\",\n    y = \"Wins\",\n    title = \"Champions by Overall Wins\",\n    subtitle = \"These are the top 25 past & current UFC Champions \nranked by wins and how they won.\",\n    caption = \"Source: UFC | Graphic by Nick Bruegman\") + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 15, face = \"bold\"),\n    plot.subtitle = element_text(size = 12))\n\n\n\n\n\nIn the chart above, we can see the top 25 champions who have the most wins, as well as the way they won these fights. KOs and TKOs are done with strikes. This could be punches, kicks, elbows, knees, pretty much anyway you can hit someone hard with a part of your body. Submissions are when a fighter twist you up like a pretzel and you have to tap and give up. The most common is choking but it can also be applying pressure to a joint or body part. The decisions are when the fight goes to the full amount of rounds and the judges decide who won based on how they scored each round. So this seems pretty simple, the guy with the most wins should be the best right? Well with so many other factors in a fight, we can dive much deeper. Charles Oliveria may have 20+ wins, but what if he has 30 losses? (Spoiler: He doesn’t) Lets look at the at their wins in relation to loses, as well as finishes. Finishes account for KOs, TKOs, and Submissions. This mean that fighter was dominate in the cage. That’s what we are looking for.\n\n\nCode\nchart_1a &lt;- ufc_careers |&gt;\n  group_by(fighter) |&gt;\n  filter(fighter %in% champs) |&gt;\n  filter(Wins &gt; 5) |&gt;\n  summarize(\n    Win_PCT,\n    Finish_PCT,\n    Wins\n    ) |&gt;\n  arrange(desc(Win_PCT))\n\nchart_1b &lt;- ufc_careers |&gt;\n  group_by(fighter) |&gt;\n  filter(fighter %in% champs) |&gt;\n  filter(Win_PCT &gt; 50) |&gt;\n  filter(Wins &gt; 7) |&gt;\n  summarize(\n    Win_PCT,\n    Finish_PCT,\n    Wins\n    ) |&gt;\n  arrange(desc(Finish_PCT))\n\nC1_Top_5_WP &lt;- chart_1a |&gt;\n  top_n(5, wt=Win_PCT)\n\nC1_Top_5_FR &lt;- chart_1b |&gt;\n  top_n(5, wt=Finish_PCT)\n\nggplot() + \n  geom_point(\n    data= chart_1a,\n    aes(x= Finish_PCT, y= Win_PCT, size= Wins),\n    alpha = .2) +\n  geom_point(\n    data= C1_Top_5_WP,\n    aes(x= Finish_PCT, y= Win_PCT, size= Wins),\n    color=\"red\") +\n  geom_point(\n    data= C1_Top_5_FR,\n    aes(x= Finish_PCT, y= Win_PCT, size= Wins),\n    color=\"blue\") +\n  geom_vline(xintercept = 50) +\n  geom_hline(yintercept = 50) +\n  geom_text_repel(\n    data=C1_Top_5_WP,\n    aes(x=Finish_PCT, y=Win_PCT, label=fighter)) +\n  geom_text_repel(\n    data=C1_Top_5_FR,\n    aes(x=Finish_PCT, y=Win_PCT, label=fighter)) +\n  labs(\n    x = \"Finisn Rate\",\n    y = \"Win Percentage\",\n    title = \"The Most Wins and Finishes Ever in the UFC\",\n    subtitle = \"Red = Lots of Wins, Blue = Lots of Finishes\",\n    caption = \"Source: UFC | Graphic by Nick Bruegman\") + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size = 12))\n\n\n\n\n\nIn Figure 2, we can see that theres a lot of guys that win a large percentage of the fights they are in. For instance Khabib never lost a fight. He’s gotta be the GOAT right?!?! Well let’s look at the how many fights he finished. Not that many, he also didn’t have many wins compared to others in this discussion. ##A similar story is Tom Aspinall, and Luke Rockhold. They finsihed 100% of their wins but have a very small amount of them so that plays a factor into the percentage. ##But what if we looked at the guys that are in the top half of each category? 50% or better in both Winning % and Finsihing %? Let’s filter those top guys out and find another way to compare them. ##So looking back on finshes as a result to being dominate in the cage, we can look at what leads to these finsihes. For submissions, its takedowns. To wrestle or grapple with someone, it takes place on the ground. Takedowns lead to the ground and the ground game leads to submissions. For KOs and TKOs, it’s strikes like we discussed before. You could throw a lot of strikes but if they don’t hit your opponent or hit them in a vunerable spot, they probably won’t do much. ##Let’s take those top guys that win and finsih a lot, and then see how accurate they are with their methods of getting that finsih.\n\n\nCode\ngoats &lt;- ufc_careers |&gt;\n  group_by(fighter) |&gt;\n  filter(fighter %in% champs) |&gt;\n  filter(Win_PCT&gt;50) |&gt;\n  filter(Finish_PCT&gt;50) |&gt;\n  filter(Wins &gt; 10)\n\nchart_2a &lt;- goats |&gt;\n  summarize(\n    Sig_Strike_PCT,\n    Takedown_PCT,\n    Finishes) |&gt;\n  arrange(desc(Sig_Strike_PCT))\n\nchart_2b &lt;- goats |&gt;\n  summarize(\n    Sig_Strike_PCT,\n    Takedown_PCT,\n    Finishes) |&gt; \n  arrange(desc(Takedown_PCT))\n\nt5_chart2a &lt;- chart_2a |&gt;\n  top_n(5, wt= Sig_Strike_PCT)\n\nt5_chart2b &lt;- chart_2b |&gt;\n  top_n(5, wt= Takedown_PCT)\n\nggplot() + \n  geom_point(\n    data= chart_2a,\n    aes(x= Sig_Strike_PCT, y= Takedown_PCT, size= Finishes),\n    alpha = .2) +\n  geom_point(\n    data= t5_chart2a,\n    aes(x= Sig_Strike_PCT, y= Takedown_PCT, size= Finishes),\n    color=\"red\") +\n  geom_point(\n    data= t5_chart2b,\n    aes(x= Sig_Strike_PCT, y= Takedown_PCT, size= Finishes),\n    color=\"blue\") +\n  geom_vline(xintercept = 50) +\n  geom_hline(yintercept = 50) +\n  geom_text_repel(\n    data=t5_chart2a,\n    aes(x= Sig_Strike_PCT, y= Takedown_PCT, label=fighter)) +\n  geom_text_repel(\n    data=t5_chart2b,\n    aes(x= Sig_Strike_PCT, y= Takedown_PCT, label=fighter)) +\n  labs(\n    x = \"Significant Strike PCT\",\n    y = \"Takedown PCT\",\n    title = \"Strikers v. Grapplers\",\n    subtitle = \"Striking leads to KOs, takedonws lead to submissions.\nThis graph shows whose the best at each.\",\n    caption = \"Source: UFC | Graphic by Nick Bruegman\") + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 10, face = \"bold\"),\n    plot.subtitle = element_text(size = 10))\n\n\n\n\n\nLooking at the chart above, we can see that there are only two guys that can dominate a fight both on thier feet and the ground. Former Middleweight Champion, Anderson Silva and current Lightweight Champion Islam Makhachev. They not only win and finish a whole lot,they do it in multiple ways. But if you look closely at their wins, Islam is lacking where Anderson is thriving.\nIt’s pretty clear that throughout Silvas career, he was dominate in the cage in multiple areas. He’s resume matches the stats as well. With a record in the UFC of 17 wins and only 7 losses, he defended his title 10 consecutive times and remains the longest regining champ the organization has ever seen (2457 days). With all the proof to back it up, Anderson Silva, is indeed the statistical, Pound-4-Pound #1 Fighter the UFC has ever seen."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Posts",
    "section": "",
    "text": "Rookies Wideouts and Potential Fantasy Points\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMay 9, 2024\n\n\nNick Bruegman\n\n\n\n\n\n\n  \n\n\n\n\nShould Broncos Fans Ride with DangeRuss?\n\n\n\n\n\n\n\nsports\n\n\ncode\n\n\ndata\n\n\n\n\n\n\n\n\n\n\n\nDec 3, 2023\n\n\nNick Bruegman\n\n\n\n\n\n\n  \n\n\n\n\nMarch Madness Machine Learning does not work\n\n\n\n\n\n\n\nsports\n\n\ncode\n\n\ndata\n\n\n\n\n\n\n\n\n\n\n\nDec 3, 2023\n\n\nNick Bruegman\n\n\n\n\n\n\n  \n\n\n\n\nThe All-Time, Pound-4-Pound, Statistical Goat of the UFC\n\n\n\n\n\n\n\nsports\n\n\ndata\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nNov 12, 2023\n\n\nNick Bruegman\n\n\n\n\n\n\n  \n\n\n\n\nHello\n\n\n\n\n\n\n\nsports\n\n\ndata\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nNick Bruegman\n\n\n\n\n\n\nNo matching items"
  }
]